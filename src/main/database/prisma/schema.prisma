// DM's Codex - Prisma Schema
// SQLite database for D&D campaign management

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../../../../data/database.db"
}

// =============================================================================
// ENUMS
// =============================================================================

enum CreatureType {
  humanoid
  undead
  construct
  dragon
  fey
  fiend
  celestial
  elemental
  aberration
  beast
  monstrosity
  ooze
  plant
  giant
}

enum Size {
  tiny
  small
  medium
  large
  huge
  gargantuan
}

enum Alignment {
  lawful_good
  neutral_good
  chaotic_good
  lawful_neutral
  true_neutral
  chaotic_neutral
  lawful_evil
  neutral_evil
  chaotic_evil
  unaligned
}

enum Language {
  common
  dwarvish
  elvish
  giant
  gnomish
  goblin
  halfling
  orc
  abyssal
  celestial
  draconic
  deep_speech
  infernal
  primordial
  sylvan
  undercommon
  thieves_cant
  druidic
}

enum CharacterClass {
  barbarian
  bard
  cleric
  druid
  fighter
  monk
  paladin
  ranger
  rogue
  sorcerer
  warlock
  wizard
  artificer
  blood_hunter
}

enum Race {
  human
  elf
  dwarf
  halfling
  dragonborn
  gnome
  half_elf
  half_orc
  tiefling
  aasimar
  firbolg
  goliath
  kenku
  tabaxi
  triton
  yuan_ti
  tortle
  changeling
  kalashtar
  warforged
  gith
  centaur
  loxodon
  minotaur
  simic_hybrid
  vedalken
  verdan
  leonin
  satyr
  fairy
  harengon
  owlin
  custom
}

enum NPCRole {
  merchant
  guard
  noble
  commoner
  criminal
  cultist
  scholar
  priest
  soldier
  artisan
  entertainer
  innkeeper
  spy
  assassin
  mage
  healer
  scout
  leader
  advisor
  other
}

enum NPCAttitude {
  hostile
  unfriendly
  indifferent
  friendly
  helpful
  devoted
}

enum BackgroundType {
  acolyte
  charlatan
  criminal
  entertainer
  folk_hero
  guild_artisan
  hermit
  noble
  outlander
  sage
  sailor
  soldier
  urchin
  haunted_one
  investigator
  knight
  pirate
  custom
}

enum ItemType {
  weapon
  armor
  potion
  scroll
  wondrous
  ring
  rod
  staff
  wand
  key_item
  treasure
  consumable
  tool
  other
}

enum ItemRarity {
  common
  uncommon
  rare
  very_rare
  legendary
  artifact
  unique
}

enum Difficulty {
  trivial
  easy
  medium
  hard
  deadly
}

enum QuestStatus {
  available
  active
  completed
  failed
  abandoned
}

enum ResetType {
  none
  short_rest
  long_rest
  dawn
  dusk
}

enum LocationType {
  city
  dungeon
  region
  building
  room
  wilderness
  other
}

enum MapAnnotationType {
  note
  treasure
  secret
  trap
  poi
  encounter
}

enum EncounterStatus {
  planned
  active
  completed
}

enum ParticipantType {
  monster
  player
}

enum InteractionType {
  conversation
  transaction
  conflict
  quest_given
  quest_completed
  other
}

enum TransactionType {
  given_to_party
  received_from_party
  shown
  discussed
}

// =============================================================================
// MAIN MODELS
// =============================================================================

// Root entity - each campaign is an autonomous narrative universe
model Campaign {
  id              String    @id @default(uuid())
  name            String
  description     String?
  coverImagePath  String?   @map("cover_image_path")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  lastPlayedAt    DateTime? @map("last_played_at")
  settings        Json?

  // Relations
  npcs              NPC[]
  locations         Location[]
  maps              Map[]
  encounters        Encounter[]
  playerCharacters  PlayerCharacter[]
  quests            Quest[]
  chronicles        Chronicle[]
  interactions      Interaction[]
  monsterCampaigns  MonsterCampaign[]
  itemCampaigns     ItemCampaign[]

  @@index([name])
  @@map("campaigns")
}

// NPCs with narrative focus, without combat statistics
model NPC {
  id             String      @id @default(uuid())
  campaignId     String      @map("campaign_id")
  name           String
  title          String?
  race           Race?
  creatureType   CreatureType? @map("creature_type")
  role           NPCRole?
  class          CharacterClass?
  alignment      Alignment?
  attitudeToParty NPCAttitude? @map("attitude_to_party")
  languages      Json?
  appearance     String?
  personality    String?
  motivations    String?
  backstory      String?
  dmNotes        String?     @map("dm_notes")
  portraitPath   String?     @map("portrait_path")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  campaign      Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  locations     NPCLocation[]
  questsGiven   Quest[]        @relation("QuestGiver")
  questsInvolved QuestNPC[]
  interactions  Interaction[]
  items         ItemNPC[]

  @@index([campaignId])
  @@index([campaignId, name])
  @@map("npcs")
}

// Any setting: cities, dungeons, regions, buildings
model Location {
  id               String       @id @default(uuid())
  campaignId       String       @map("campaign_id")
  parentLocationId String?      @map("parent_location_id")
  name             String
  type             LocationType
  description      String?
  notableFeatures  Json?        @map("notable_features")
  coverImagePath   String?      @map("cover_image_path")
  dmNotes          String?      @map("dm_notes")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  // Relations
  campaign        Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  parentLocation  Location?       @relation("LocationHierarchy", fields: [parentLocationId], references: [id])
  childLocations  Location[]      @relation("LocationHierarchy")
  maps            Map[]
  encounters      Encounter[]
  npcs            NPCLocation[]
  quests          QuestLocation[]
  items           ItemLocation[]

  @@index([campaignId])
  @@index([campaignId, name])
  @@index([parentLocationId])
  @@map("locations")
}

// Map images with annotations
model Map {
  id          String   @id @default(uuid())
  campaignId  String   @map("campaign_id")
  locationId  String?  @map("location_id")
  name        String
  imagePath   String   @map("image_path")
  gridSize    Int?     @map("grid_size")
  gridEnabled Boolean  @default(false) @map("grid_enabled")
  scale       String?
  width       Int?
  height      Int?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  campaign     Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  location     Location?       @relation(fields: [locationId], references: [id])
  annotations  MapAnnotation[]
  encounters   Encounter[]

  @@index([campaignId])
  @@index([locationId])
  @@map("maps")
}

// Pins, notes, treasures, secret passages on maps
model MapAnnotation {
  id       String              @id @default(uuid())
  mapId    String              @map("map_id")
  type     MapAnnotationType
  x        Float
  y        Float
  title    String?
  content  String?
  isHidden Boolean             @default(false) @map("is_hidden")

  // Relations
  map Map @relation(fields: [mapId], references: [id], onDelete: Cascade)

  @@index([mapId])
  @@map("map_annotations")
}

// Creatures with complete statistics for combat
model Monster {
  id                  String        @id @default(uuid())
  name                String
  size                Size
  creatureType        CreatureType  @map("creature_type")
  alignment           Alignment
  portraitPath        String?       @map("portrait_path")
  hpMax               Int           @map("hp_max")
  hpDice              String?       @map("hp_dice")
  ac                  Int
  acDescription       String?       @map("ac_description")
  speed               Json
  abilities           Json
  savingThrows        Json?         @map("saving_throws")
  skills              Json?
  damageResistances   Json?         @map("damage_resistances")
  damageImmunities    Json?         @map("damage_immunities")
  conditionImmunities Json?         @map("condition_immunities")
  senses              String?
  languages           Json?
  challengeRating     Float         @map("challenge_rating")
  actions             Json?
  reactions           Json?
  legendaryActions    Json?         @map("legendary_actions")
  description         String?
  dmNotes             String?       @map("dm_notes")
  isTemplate          Boolean       @default(true) @map("is_template")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  // Relations
  campaigns            MonsterCampaign[]
  encounterParticipants EncounterParticipant[]

  @@index([name])
  @@index([creatureType])
  @@index([challengeRating])
  @@map("monsters")
}

// States and conditions applicable to creatures
model Condition {
  id                String  @id @default(uuid())
  name              String  @unique
  icon              String?
  description       String?
  mechanicalEffects String? @map("mechanical_effects")
  isCustom          Boolean @default(false) @map("is_custom")

  @@index([name])
  @@map("conditions")
}

// Combat preparation with map and monsters
model Encounter {
  id          String          @id @default(uuid())
  campaignId  String          @map("campaign_id")
  mapId       String?         @map("map_id")
  locationId  String?         @map("location_id")
  name        String
  description String?
  difficulty  Difficulty
  status      EncounterStatus @default(planned)
  dmNotes     String?         @map("dm_notes")
  createdAt   DateTime        @default(now()) @map("created_at")
  startedAt   DateTime?       @map("started_at")
  completedAt DateTime?       @map("completed_at")

  // Relations
  campaign     Campaign               @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  map          Map?                   @relation(fields: [mapId], references: [id])
  location     Location?              @relation(fields: [locationId], references: [id])
  participants EncounterParticipant[]

  @@index([campaignId])
  @@index([status])
  @@map("encounters")
}

// Instance of a monster or PC in a specific encounter
model EncounterParticipant {
  id                 String          @id @default(uuid())
  encounterId        String          @map("encounter_id")
  participantType    ParticipantType @map("participant_type")
  monsterId          String?         @map("monster_id")
  playerCharacterId  String?         @map("player_character_id")
  customName         String?         @map("custom_name")
  initiative         Int?
  hpCurrent          Int             @map("hp_current")
  hpMax              Int             @map("hp_max")
  ac                 Int
  conditions         Json?
  positionX          Float?          @map("position_x")
  positionY          Float?          @map("position_y")
  isVisible          Boolean         @default(true) @map("is_visible")
  dmNotes            String?         @map("dm_notes")

  // Relations
  encounter       Encounter        @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  monster         Monster?         @relation(fields: [monsterId], references: [id])
  playerCharacter PlayerCharacter? @relation(fields: [playerCharacterId], references: [id])

  @@index([encounterId])
  @@map("encounter_participants")
}

// Player character data for combat and interaction management
model PlayerCharacter {
  id               String         @id @default(uuid())
  campaignId       String         @map("campaign_id")
  playerName       String         @map("player_name")
  characterName    String         @map("character_name")
  race             Race
  class            CharacterClass
  level            Int
  alignment        Alignment
  backgroundType   BackgroundType @map("background_type")
  background       String?
  languages        Json?
  portraitPath     String?        @map("portrait_path")
  hpMax            Int            @map("hp_max")
  ac               Int
  passivePerception Int           @map("passive_perception")
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  // Relations
  campaign              Campaign               @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  encounterParticipants EncounterParticipant[]

  @@index([campaignId])
  @@index([campaignId, characterName])
  @@map("player_characters")
}

// Objectives and narrative plots
model Quest {
  id                String       @id @default(uuid())
  campaignId        String       @map("campaign_id")
  parentQuestId     String?      @map("parent_quest_id")
  name              String
  description       String?
  objectives        Json?
  status            QuestStatus  @default(available)
  questGiverNpcId   String?      @map("quest_giver_npc_id")
  rewardDescription String?      @map("reward_description")
  rewardItems       Json?        @map("reward_items")
  isMilestone       Boolean      @default(false) @map("is_milestone")
  dmNotes           String?      @map("dm_notes")
  createdAt         DateTime     @default(now()) @map("created_at")
  startedAt         DateTime?    @map("started_at")
  completedAt       DateTime?    @map("completed_at")

  // Relations
  campaign      Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  parentQuest   Quest?          @relation("QuestHierarchy", fields: [parentQuestId], references: [id])
  subQuests     Quest[]         @relation("QuestHierarchy")
  questGiver    NPC?            @relation("QuestGiver", fields: [questGiverNpcId], references: [id])
  npcs          QuestNPC[]
  locations     QuestLocation[]
  chronicles    ChronicleQuest[]

  @@index([campaignId])
  @@index([status])
  @@index([questGiverNpcId])
  @@map("quests")
}

// Magic items, treasures, key items
model Item {
  id                String     @id @default(uuid())
  name              String
  type              ItemType
  rarity            ItemRarity
  description       String?
  mechanicalEffects String?    @map("mechanical_effects")
  grantedAbilities  Json?      @map("granted_abilities")
  value             String?
  weight            Float?
  quantity          Int        @default(1)
  isMagical         Boolean    @default(false) @map("is_magical")
  attunementRequired Boolean   @default(false) @map("attunement_required")
  dmNotes           String?    @map("dm_notes")
  createdAt         DateTime   @default(now()) @map("created_at")

  // Relations
  campaigns     ItemCampaign[]
  locations     ItemLocation[]
  npcs          ItemNPC[]
  interactions  InteractionItem[]

  @@index([name])
  @@index([type])
  @@index([rarity])
  @@map("items")
}

// Session diary
model Chronicle {
  id                String   @id @default(uuid())
  campaignId        String   @map("campaign_id")
  sessionNumber     Int      @map("session_number")
  sessionDate       DateTime @map("session_date")
  title             String?
  summary           String?
  playerDeeds       Json?    @map("player_deeds")
  importantDecisions Json?   @map("important_decisions")
  dmNotes           String?  @map("dm_notes")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  campaign Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  quests   ChronicleQuest[]

  @@index([campaignId])
  @@index([sessionDate])
  @@unique([campaignId, sessionNumber])
  @@map("chronicles")
}

// Registry of interactions between NPCs and PCs/Party
model Interaction {
  id              String          @id @default(uuid())
  campaignId      String          @map("campaign_id")
  npcId           String          @map("npc_id")
  interactionDate DateTime        @map("interaction_date")
  sessionDate     DateTime        @map("session_date")
  interactionType InteractionType @map("interaction_type")
  summary         String?
  details         String?
  attitudeChange  NPCAttitude?    @map("attitude_change")
  involvedPcs     Json?           @map("involved_pcs")
  dmNotes         String?         @map("dm_notes")
  createdAt       DateTime        @default(now()) @map("created_at")

  // Relations
  campaign Campaign         @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  npc      NPC              @relation(fields: [npcId], references: [id], onDelete: Cascade)
  items    InteractionItem[]

  @@index([campaignId])
  @@index([npcId])
  @@index([sessionDate])
  @@map("interactions")
}

// =============================================================================
// MANY-TO-MANY RELATIONSHIP TABLES
// =============================================================================

// Links monsters to campaigns (a monster can appear in multiple campaigns)
model MonsterCampaign {
  monsterId  String @map("monster_id")
  campaignId String @map("campaign_id")

  // Relations
  monster  Monster  @relation(fields: [monsterId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([monsterId, campaignId])
  @@map("monster_campaigns")
}

// Links items to campaigns (an item can exist in multiple campaigns)
model ItemCampaign {
  itemId     String @map("item_id")
  campaignId String @map("campaign_id")

  // Relations
  item     Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([itemId, campaignId])
  @@map("item_campaigns")
}

// Links NPCs to locations where they can be found
model NPCLocation {
  npcId      String  @map("npc_id")
  locationId String  @map("location_id")
  isPrimary  Boolean @default(false) @map("is_primary")

  // Relations
  npc      NPC      @relation(fields: [npcId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@id([npcId, locationId])
  @@map("npc_locations")
}

// Links quests to involved NPCs (besides the quest giver)
model QuestNPC {
  questId String @map("quest_id")
  npcId   String @map("npc_id")
  role    String?

  // Relations
  quest Quest @relation(fields: [questId], references: [id], onDelete: Cascade)
  npc   NPC   @relation(fields: [npcId], references: [id], onDelete: Cascade)

  @@id([questId, npcId])
  @@map("quest_npcs")
}

// Links quests to relevant locations
model QuestLocation {
  questId    String @map("quest_id")
  locationId String @map("location_id")

  // Relations
  quest    Quest    @relation(fields: [questId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@id([questId, locationId])
  @@map("quest_locations")
}

// Links chronicle events to completed/failed quests in the session
model ChronicleQuest {
  chronicleId  String @map("chronicle_id")
  questId      String @map("quest_id")
  statusChange String @map("status_change")

  // Relations
  chronicle Chronicle @relation(fields: [chronicleId], references: [id], onDelete: Cascade)
  quest     Quest     @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@id([chronicleId, questId])
  @@map("chronicle_quests")
}

// Where items are located
model ItemLocation {
  itemId     String  @map("item_id")
  locationId String  @map("location_id")
  isHidden   Boolean @default(false) @map("is_hidden")
  notes      String?

  // Relations
  item     Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@id([itemId, locationId])
  @@map("item_locations")
}

// Items owned by NPCs
model ItemNPC {
  itemId String @map("item_id")
  npcId  String @map("npc_id")

  // Relations
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  npc  NPC  @relation(fields: [npcId], references: [id], onDelete: Cascade)

  @@id([itemId, npcId])
  @@map("item_npcs")
}

// Items exchanged/given during an interaction
model InteractionItem {
  interactionId   String          @map("interaction_id")
  itemId          String          @map("item_id")
  transactionType TransactionType @map("transaction_type")

  // Relations
  interaction Interaction @relation(fields: [interactionId], references: [id], onDelete: Cascade)
  item        Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([interactionId, itemId])
  @@map("interaction_items")
}