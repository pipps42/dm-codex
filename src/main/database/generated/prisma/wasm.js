
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  coverImagePath: 'coverImagePath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastPlayedAt: 'lastPlayedAt',
  settings: 'settings'
};

exports.Prisma.NPCScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  name: 'name',
  title: 'title',
  race: 'race',
  creatureType: 'creatureType',
  role: 'role',
  class: 'class',
  alignment: 'alignment',
  attitudeToParty: 'attitudeToParty',
  languages: 'languages',
  appearance: 'appearance',
  personality: 'personality',
  motivations: 'motivations',
  backstory: 'backstory',
  dmNotes: 'dmNotes',
  portraitPath: 'portraitPath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  parentLocationId: 'parentLocationId',
  name: 'name',
  type: 'type',
  description: 'description',
  notableFeatures: 'notableFeatures',
  coverImagePath: 'coverImagePath',
  dmNotes: 'dmNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MapScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  locationId: 'locationId',
  name: 'name',
  imagePath: 'imagePath',
  gridSize: 'gridSize',
  gridEnabled: 'gridEnabled',
  scale: 'scale',
  width: 'width',
  height: 'height',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MapAnnotationScalarFieldEnum = {
  id: 'id',
  mapId: 'mapId',
  type: 'type',
  x: 'x',
  y: 'y',
  title: 'title',
  content: 'content',
  isHidden: 'isHidden'
};

exports.Prisma.MonsterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  size: 'size',
  creatureType: 'creatureType',
  alignment: 'alignment',
  portraitPath: 'portraitPath',
  hpMax: 'hpMax',
  hpDice: 'hpDice',
  ac: 'ac',
  acDescription: 'acDescription',
  speed: 'speed',
  abilities: 'abilities',
  savingThrows: 'savingThrows',
  skills: 'skills',
  damageResistances: 'damageResistances',
  damageImmunities: 'damageImmunities',
  conditionImmunities: 'conditionImmunities',
  senses: 'senses',
  languages: 'languages',
  challengeRating: 'challengeRating',
  actions: 'actions',
  reactions: 'reactions',
  legendaryActions: 'legendaryActions',
  description: 'description',
  dmNotes: 'dmNotes',
  isTemplate: 'isTemplate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConditionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  description: 'description',
  mechanicalEffects: 'mechanicalEffects',
  isCustom: 'isCustom'
};

exports.Prisma.EncounterScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  mapId: 'mapId',
  locationId: 'locationId',
  name: 'name',
  description: 'description',
  difficulty: 'difficulty',
  status: 'status',
  dmNotes: 'dmNotes',
  createdAt: 'createdAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.EncounterParticipantScalarFieldEnum = {
  id: 'id',
  encounterId: 'encounterId',
  participantType: 'participantType',
  monsterId: 'monsterId',
  playerCharacterId: 'playerCharacterId',
  customName: 'customName',
  initiative: 'initiative',
  hpCurrent: 'hpCurrent',
  hpMax: 'hpMax',
  ac: 'ac',
  conditions: 'conditions',
  positionX: 'positionX',
  positionY: 'positionY',
  isVisible: 'isVisible',
  dmNotes: 'dmNotes'
};

exports.Prisma.PlayerCharacterScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  playerName: 'playerName',
  characterName: 'characterName',
  race: 'race',
  class: 'class',
  level: 'level',
  alignment: 'alignment',
  backgroundType: 'backgroundType',
  background: 'background',
  languages: 'languages',
  portraitPath: 'portraitPath',
  hpMax: 'hpMax',
  ac: 'ac',
  passivePerception: 'passivePerception',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  parentQuestId: 'parentQuestId',
  name: 'name',
  description: 'description',
  objectives: 'objectives',
  status: 'status',
  questGiverNpcId: 'questGiverNpcId',
  rewardDescription: 'rewardDescription',
  rewardItems: 'rewardItems',
  isMilestone: 'isMilestone',
  dmNotes: 'dmNotes',
  createdAt: 'createdAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  rarity: 'rarity',
  description: 'description',
  mechanicalEffects: 'mechanicalEffects',
  grantedAbilities: 'grantedAbilities',
  value: 'value',
  weight: 'weight',
  quantity: 'quantity',
  isMagical: 'isMagical',
  attunementRequired: 'attunementRequired',
  dmNotes: 'dmNotes',
  createdAt: 'createdAt'
};

exports.Prisma.ChronicleScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  sessionNumber: 'sessionNumber',
  sessionDate: 'sessionDate',
  title: 'title',
  summary: 'summary',
  playerDeeds: 'playerDeeds',
  importantDecisions: 'importantDecisions',
  dmNotes: 'dmNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InteractionScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  npcId: 'npcId',
  interactionDate: 'interactionDate',
  sessionDate: 'sessionDate',
  interactionType: 'interactionType',
  summary: 'summary',
  details: 'details',
  attitudeChange: 'attitudeChange',
  involvedPcs: 'involvedPcs',
  dmNotes: 'dmNotes',
  createdAt: 'createdAt'
};

exports.Prisma.MonsterCampaignScalarFieldEnum = {
  monsterId: 'monsterId',
  campaignId: 'campaignId'
};

exports.Prisma.ItemCampaignScalarFieldEnum = {
  itemId: 'itemId',
  campaignId: 'campaignId'
};

exports.Prisma.NPCLocationScalarFieldEnum = {
  npcId: 'npcId',
  locationId: 'locationId',
  isPrimary: 'isPrimary'
};

exports.Prisma.QuestNPCScalarFieldEnum = {
  questId: 'questId',
  npcId: 'npcId',
  role: 'role'
};

exports.Prisma.QuestLocationScalarFieldEnum = {
  questId: 'questId',
  locationId: 'locationId'
};

exports.Prisma.ChronicleQuestScalarFieldEnum = {
  chronicleId: 'chronicleId',
  questId: 'questId',
  statusChange: 'statusChange'
};

exports.Prisma.ItemLocationScalarFieldEnum = {
  itemId: 'itemId',
  locationId: 'locationId',
  isHidden: 'isHidden',
  notes: 'notes'
};

exports.Prisma.ItemNPCScalarFieldEnum = {
  itemId: 'itemId',
  npcId: 'npcId'
};

exports.Prisma.InteractionItemScalarFieldEnum = {
  interactionId: 'interactionId',
  itemId: 'itemId',
  transactionType: 'transactionType'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Race = exports.$Enums.Race = {
  human: 'human',
  elf: 'elf',
  dwarf: 'dwarf',
  halfling: 'halfling',
  dragonborn: 'dragonborn',
  gnome: 'gnome',
  half_elf: 'half_elf',
  half_orc: 'half_orc',
  tiefling: 'tiefling',
  aasimar: 'aasimar',
  firbolg: 'firbolg',
  goliath: 'goliath',
  kenku: 'kenku',
  tabaxi: 'tabaxi',
  triton: 'triton',
  yuan_ti: 'yuan_ti',
  tortle: 'tortle',
  changeling: 'changeling',
  kalashtar: 'kalashtar',
  warforged: 'warforged',
  gith: 'gith',
  centaur: 'centaur',
  loxodon: 'loxodon',
  minotaur: 'minotaur',
  simic_hybrid: 'simic_hybrid',
  vedalken: 'vedalken',
  verdan: 'verdan',
  leonin: 'leonin',
  satyr: 'satyr',
  fairy: 'fairy',
  harengon: 'harengon',
  owlin: 'owlin',
  custom: 'custom'
};

exports.CreatureType = exports.$Enums.CreatureType = {
  humanoid: 'humanoid',
  undead: 'undead',
  construct: 'construct',
  dragon: 'dragon',
  fey: 'fey',
  fiend: 'fiend',
  celestial: 'celestial',
  elemental: 'elemental',
  aberration: 'aberration',
  beast: 'beast',
  monstrosity: 'monstrosity',
  ooze: 'ooze',
  plant: 'plant',
  giant: 'giant'
};

exports.NPCRole = exports.$Enums.NPCRole = {
  merchant: 'merchant',
  guard: 'guard',
  noble: 'noble',
  commoner: 'commoner',
  criminal: 'criminal',
  cultist: 'cultist',
  scholar: 'scholar',
  priest: 'priest',
  soldier: 'soldier',
  artisan: 'artisan',
  entertainer: 'entertainer',
  innkeeper: 'innkeeper',
  spy: 'spy',
  assassin: 'assassin',
  mage: 'mage',
  healer: 'healer',
  scout: 'scout',
  leader: 'leader',
  advisor: 'advisor',
  other: 'other'
};

exports.CharacterClass = exports.$Enums.CharacterClass = {
  barbarian: 'barbarian',
  bard: 'bard',
  cleric: 'cleric',
  druid: 'druid',
  fighter: 'fighter',
  monk: 'monk',
  paladin: 'paladin',
  ranger: 'ranger',
  rogue: 'rogue',
  sorcerer: 'sorcerer',
  warlock: 'warlock',
  wizard: 'wizard',
  artificer: 'artificer',
  blood_hunter: 'blood_hunter'
};

exports.Alignment = exports.$Enums.Alignment = {
  lawful_good: 'lawful_good',
  neutral_good: 'neutral_good',
  chaotic_good: 'chaotic_good',
  lawful_neutral: 'lawful_neutral',
  true_neutral: 'true_neutral',
  chaotic_neutral: 'chaotic_neutral',
  lawful_evil: 'lawful_evil',
  neutral_evil: 'neutral_evil',
  chaotic_evil: 'chaotic_evil',
  unaligned: 'unaligned'
};

exports.NPCAttitude = exports.$Enums.NPCAttitude = {
  hostile: 'hostile',
  unfriendly: 'unfriendly',
  indifferent: 'indifferent',
  friendly: 'friendly',
  helpful: 'helpful',
  devoted: 'devoted'
};

exports.LocationType = exports.$Enums.LocationType = {
  city: 'city',
  dungeon: 'dungeon',
  region: 'region',
  building: 'building',
  room: 'room',
  wilderness: 'wilderness',
  other: 'other'
};

exports.MapAnnotationType = exports.$Enums.MapAnnotationType = {
  note: 'note',
  treasure: 'treasure',
  secret: 'secret',
  trap: 'trap',
  poi: 'poi',
  encounter: 'encounter'
};

exports.Size = exports.$Enums.Size = {
  tiny: 'tiny',
  small: 'small',
  medium: 'medium',
  large: 'large',
  huge: 'huge',
  gargantuan: 'gargantuan'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  trivial: 'trivial',
  easy: 'easy',
  medium: 'medium',
  hard: 'hard',
  deadly: 'deadly'
};

exports.EncounterStatus = exports.$Enums.EncounterStatus = {
  planned: 'planned',
  active: 'active',
  completed: 'completed'
};

exports.ParticipantType = exports.$Enums.ParticipantType = {
  monster: 'monster',
  player: 'player'
};

exports.BackgroundType = exports.$Enums.BackgroundType = {
  acolyte: 'acolyte',
  charlatan: 'charlatan',
  criminal: 'criminal',
  entertainer: 'entertainer',
  folk_hero: 'folk_hero',
  guild_artisan: 'guild_artisan',
  hermit: 'hermit',
  noble: 'noble',
  outlander: 'outlander',
  sage: 'sage',
  sailor: 'sailor',
  soldier: 'soldier',
  urchin: 'urchin',
  haunted_one: 'haunted_one',
  investigator: 'investigator',
  knight: 'knight',
  pirate: 'pirate',
  custom: 'custom'
};

exports.QuestStatus = exports.$Enums.QuestStatus = {
  available: 'available',
  active: 'active',
  completed: 'completed',
  failed: 'failed',
  abandoned: 'abandoned'
};

exports.ItemType = exports.$Enums.ItemType = {
  weapon: 'weapon',
  armor: 'armor',
  potion: 'potion',
  scroll: 'scroll',
  wondrous: 'wondrous',
  ring: 'ring',
  rod: 'rod',
  staff: 'staff',
  wand: 'wand',
  key_item: 'key_item',
  treasure: 'treasure',
  consumable: 'consumable',
  tool: 'tool',
  other: 'other'
};

exports.ItemRarity = exports.$Enums.ItemRarity = {
  common: 'common',
  uncommon: 'uncommon',
  rare: 'rare',
  very_rare: 'very_rare',
  legendary: 'legendary',
  artifact: 'artifact',
  unique: 'unique'
};

exports.InteractionType = exports.$Enums.InteractionType = {
  conversation: 'conversation',
  transaction: 'transaction',
  conflict: 'conflict',
  quest_given: 'quest_given',
  quest_completed: 'quest_completed',
  other: 'other'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  given_to_party: 'given_to_party',
  received_from_party: 'received_from_party',
  shown: 'shown',
  discussed: 'discussed'
};

exports.Prisma.ModelName = {
  Campaign: 'Campaign',
  NPC: 'NPC',
  Location: 'Location',
  Map: 'Map',
  MapAnnotation: 'MapAnnotation',
  Monster: 'Monster',
  Condition: 'Condition',
  Encounter: 'Encounter',
  EncounterParticipant: 'EncounterParticipant',
  PlayerCharacter: 'PlayerCharacter',
  Quest: 'Quest',
  Item: 'Item',
  Chronicle: 'Chronicle',
  Interaction: 'Interaction',
  MonsterCampaign: 'MonsterCampaign',
  ItemCampaign: 'ItemCampaign',
  NPCLocation: 'NPCLocation',
  QuestNPC: 'QuestNPC',
  QuestLocation: 'QuestLocation',
  ChronicleQuest: 'ChronicleQuest',
  ItemLocation: 'ItemLocation',
  ItemNPC: 'ItemNPC',
  InteractionItem: 'InteractionItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
